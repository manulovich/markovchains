{"version":3,"sources":["scripts/createNewText/utils/textUtils.ts","scripts/createNewText/LinkMap/Pair.ts","scripts/createNewText/LinkMap/Counter.ts","scripts/createNewText/LinkMap/LinkMap.ts","scripts/createNewText/LinkMap/index.ts","scripts/createNewText/DependentLinksOfText.ts","scripts/createNewText/index.ts","scripts/app.ts"],"names":[],"mappings":"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","file":"app.19e736fb.js","sourceRoot":"../src","sourcesContent":["import LinkMap from '../LinkMap';\n\nconst ucFirst = (str: string): string => {\n    return str[0].toUpperCase() + str.slice(1);\n}\n\nconst createNewSuggestion = (\n    linkMap: LinkMap,\n    maxWordCount: number = 1\n): string => {\n    let prevWord = linkMap.getRandomLink();\n    let suggestion = ucFirst(prevWord);\n\n    if (maxWordCount < 1) {\n        return '';\n    }\n\n    for (let i = 2; i <= maxWordCount; i += 1) {\n        const currentWord = linkMap.getRandomLinkFomReleatedLinks(prevWord);\n\n        if (currentWord === '.' || i === maxWordCount) {\n            suggestion += '.';\n            break;\n        }\n\n        suggestion += ` ${currentWord}`;\n        prevWord = currentWord;\n    };\n\n    return suggestion.slice(0);\n};\n\nexport {\n    ucFirst,\n    createNewSuggestion\n}\n","type PairMap = {\n    [key: string]: string[];\n}\n\nclass Pair {\n    private pairMap: PairMap = {};\n\n    public set(prevlink: string, link: string): void {\n        const { pairMap } = this;\n        \n        if (pairMap[prevlink]) {\n            pairMap[prevlink].push(link);\n            return;\n        }\n\n        pairMap[prevlink] = [link];\n    }\n\n    public get(link: string): string[] {\n        const { pairMap } = this;\n\n        return pairMap[link] || ['.'];\n    }\n\n    public get map() {\n        return this.pairMap;\n    }\n}\n\nexport default Pair;\n","type CounterMap = {\n    [key: string]: number\n}\n\nclass Counter {\n    private counterMap: CounterMap = {};\n\n    public set(link: string): void {\n        const { counterMap } = this;\n        counterMap[link] = counterMap[link] ? counterMap[link] + 1 : 1;\n    }\n\n    public get(link: string): number {\n        const { counterMap } = this;\n        return counterMap[link] || 1;\n    }\n}\n\nexport default Counter;\n","import Pair from './Pair';\nimport Counter from './Counter';\n\ntype RelatedLinks = {\n    value: string;\n    probability: number;\n}[];\n\nclass LinkMap {\n    counter: Counter;\n    pair: Pair;\n\n    constructor() {\n        this.counter = new Counter();\n        this.pair = new Pair();\n    }\n\n    public set(prevLink: string, link: string): void {\n        this.counter.set(link);\n        this.pair.set(prevLink, link);\n    }\n\n    public get(link: string): RelatedLinks {\n        const relatedLinks = this.pair.get(link);\n        const sumRelatedLinks: number = relatedLinks\n            .reduce((acc, relatedLink) => acc + this.counter.get(relatedLink), 0);\n\n        return relatedLinks\n            .map(relatedLink => {\n                return {\n                    value: relatedLink,\n                    probability: this.counter.get(relatedLink) / sumRelatedLinks\n                }\n            })\n    }\n\n    public getRandomLink(): string {\n        const links = Object.keys(this.pair.map);\n        return links[Math.floor(Math.random() * links.length)];\n    }\n\n    public getRandomLinkFomReleatedLinks(link: string): string {\n        const threshold = Math.random();\n        const relatedLinks = this\n            .get(link)\n            .sort((linkA, linkB) => linkA.probability - linkB.probability);\n\n        for (let link of relatedLinks) {\n            if (link.probability > threshold) { \n                return link.value;\n            }\n        }\n\n        return relatedLinks[relatedLinks.length - 1].value;\n    }\n}\n\nexport default LinkMap;\n","import LinkMap from './LinkMap';\nexport default LinkMap;\n","class DependentLinksOfText {\n    splitText: string[];\n\n    constructor(text: string) {\n        this.splitText = text\n            .trim()\n            .split(/[,.?! \\n:]/)\n            .filter(link => link != '');\n    }\n\n    [Symbol.iterator](): any {\n        let index = 0;\n        \n        return {\n            next: () => {\n                index += 1;\n\n                if (index >= this.splitText.length) {\n                    return { done: true };\n                }\n\n                return {\n                    value: [\n                        this.splitText[index - 1].toLowerCase(),\n                        this.splitText[index].toLowerCase()\n                    ],\n                    done: false\n                }\n            }\n        }\n    }\n}\n\nexport default DependentLinksOfText;\n","import { createNewSuggestion } from './utils/textUtils';\nimport LinkMap from './LinkMap';\nimport DependentLinksOfText from './DependentLinksOfText';\n\nconst createNewText = (\n    srcText: string,\n    countSuggestion: number = 1,\n    maxWordCount: number = 1\n): string => {\n    const dependentLinksOfText = new DependentLinksOfText(srcText);\n    const linkMap = new LinkMap();\n    let newText = '';\n\n    for (let [prevLink, currentLink] of dependentLinksOfText) {\n        linkMap.set(prevLink, currentLink);\n    }\n\n    for (let i = 1; i <= countSuggestion; i += 1) {\n        newText += `${createNewSuggestion(linkMap, maxWordCount)} `;\n    }\n\n    return newText;\n};\n\nexport default createNewText;\n","import createNewText from './createNewText';\n\nconst form = document.querySelector('.input-src-text');\nconst sourceTextElement: any = document.querySelector('.input-src-text__src');\nconst resultElement: any = document.querySelector('.result');\nconst rangeElement: any = document.querySelector('.input-src-text__select-count-p');\n\nform?.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const sourceText = sourceTextElement.value;\n\n    resultElement.innerText = createNewText(\n        sourceText,\n        5,\n        Number(rangeElement.value)\n    );\n});"]}